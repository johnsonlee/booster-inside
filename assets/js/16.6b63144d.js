(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{353:function(r,a,e){"use strict";e.r(a);var s=e(33),v=Object(s.a)({},(function(){var r=this,a=r.$createElement,e=r._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"classtransformer-variantprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#classtransformer-variantprocessor"}},[r._v("#")]),r._v(" ClassTransformer + VariantProcessor")]),r._v(" "),e("h2",{attrs:{id:"为什么要组合使用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要组合使用？"}},[r._v("#")]),r._v(" 为什么要组合使用？")]),r._v(" "),e("p",[r._v("首先，我们来回顾一下 "),e("em",[r._v("ClassTransformer")]),r._v(" 与 "),e("em",[r._v("VariantProcessor")]),r._v(" 各自的职责：")]),r._v(" "),e("ul",[e("li",[e("em",[r._v("ClassTransformer")]),r._v(" 主要用于操作字节码，除了字节码以外的内容，"),e("em",[r._v("ClassTransformer")]),r._v(" 是不太容易操作的，比如：资源、创建 "),e("em",[r._v("Task")]),r._v(" 等")]),r._v(" "),e("li",[e("em",[r._v("VariantProcessor")]),r._v(" 主要负责除操作字节码以外的其它工作，比如：创建 "),e("em",[r._v("Task")]),r._v("，访问构建中间产物，等等。")])]),r._v(" "),e("p",[r._v("为什么要这么设计呢？主要是两方面的考虑：")]),r._v(" "),e("ol",[e("li",[r._v("分工更明确")]),r._v(" "),e("li",[r._v("将 "),e("em",[r._v("ClassTransformer")]),r._v(" 与 "),e("em",[r._v("Gradle API")]),r._v(" 解耦")])]),r._v(" "),e("p",[r._v("一方面，便于单元测试，另一方面，可以在非 "),e("em",[r._v("Gradle")]),r._v(" 工程中复用 "),e("em",[r._v("ClassTransformer")])]),r._v(" "),e("h2",{attrs:{id:"经典用法-类库注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#经典用法-类库注入"}},[r._v("#")]),r._v(" 经典用法 —— 类库注入")]),r._v(" "),e("p",[r._v("通常，我们会在 "),e("em",[r._v("ClassTransformer")]),r._v(" 中修改或者注入字节码，如果在 "),e("em",[r._v("ClassTransformer")]),r._v(" 注入的字节码依赖于另一个类库（JAR / AAR），我们该怎么办呢？办法有很多：")]),r._v(" "),e("ol",[e("li",[r._v("将类库内置到 "),e("em",[r._v("resources")]),r._v(" 中，然后在 "),e("em",[r._v("ClassTransformer")]),r._v(" 中将其拷贝到 "),e("em",[r._v("Transform")]),r._v(" 的输出目录中")]),r._v(" "),e("li",[r._v("从远程下载到 "),e("em",[r._v("Transform")]),r._v(" 的输出目录中")]),r._v(" "),e("li",[r._v("......")])]),r._v(" "),e("p",[r._v("如果这个类库（JAR / AAR）又依赖了其它的类库（JAR / AAR），那我们该怎么办呢？虽然这样会让事情变得很复杂，也不是没有办法，可以把 "),e("em",[r._v("Maven")]),r._v(" 或者 "),e("em",[r._v("Ivy")]),r._v(" 等依赖管理工具的类库集成进来。")]),r._v(" "),e("p",[r._v("如果传递依赖的类库在 "),e("em",[r._v("APP")]),r._v(" 中已经存在，而且跟 "),e("em",[r._v("APP")]),r._v(" 依赖的类库版本不一致，那我们该怎么办呢？如果是这样的话，前面的方法就不太容易实现了，有没有更简单的办法呢？当然有，这就是设计 "),e("em",[r._v("VariantProcessor")]),r._v(" 的初衷，让大规模的字节码注入变得更容易。")]),r._v(" "),e("h2",{attrs:{id:"动手实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动手实践"}},[r._v("#")]),r._v(" 动手实践")]),r._v(" "),e("p",[r._v("相信很多 "),e("em",[r._v("Android")]),r._v(" 开发者有遇到动态库加载失败的情况，例如：")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("java.lang.UnsatisfiedLinkError: Couldn't load xxx from loader dalvik.system.PathClassLoader: findLibrary returned null\n  at java.lang.Runtime.loadLibrary(Runtime.java:365)\n  at java.lang.System.loadLibrary(System.java:535)\n  at com.your.app.NativeClass.<clinit>(Native.java:16)\n  ... 63 more\n")])])]),e("p",[r._v("我们可以使用 "),e("a",{attrs:{href:"https://github.com/KeepSafe/ReLinker",target:"_blank",rel:"noopener noreferrer"}},[r._v("ReLinker"),e("OutboundLink")],1),r._v(" 来避免这种崩溃的发生，如何使用 "),e("em",[r._v("Booster")]),r._v(" 来完成对 "),e("a",{attrs:{href:"https://github.com/KeepSafe/ReLinker",target:"_blank",rel:"noopener noreferrer"}},[r._v("ReLinker"),e("OutboundLink")],1),r._v(" 的注入呢？这个问题就留给本书的读者吧。")])])}),[],!1,null,null,null);a.default=v.exports}}]);