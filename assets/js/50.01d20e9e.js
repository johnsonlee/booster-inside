(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{371:function(t,v,_){"use strict";_.r(v);var e=_(33),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"booster-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#booster-简介"}},[t._v("#")]),t._v(" Booster 简介")]),t._v(" "),_("h2",{attrs:{id:"什么是-booster-？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-booster-？"}},[t._v("#")]),t._v(" 什么是 Booster ？")]),t._v(" "),_("p",[t._v("Booster 是一款专门为移动应用设计的易用、轻量级且可扩展的质量优化框架，其目标主要是为了解决随着 APP 复杂度的提升而带来的性能、稳定性、包体积等一系列质量问题。")]),t._v(" "),_("p",[t._v("Booster 不仅仅只是一个框架，它还提供了性能检测、多线程优化、资源索引内联、资源去冗余、资源压缩、系统 Bug 修复等一系列功能模块，可以使得稳定性能够提升 15% ~ 25%，包体积可以减小 1MB ~ 10MB，甚至更多。")]),t._v(" "),_("h2",{attrs:{id:"为什么是-booster-？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-booster-？"}},[t._v("#")]),t._v(" 为什么是 Booster ？")]),t._v(" "),_("p",[t._v("质量优化是所有应用开发者都要面临的问题，对于 DAU 千万级的 APP 来说，万分之一的崩溃率就意味着上千的用户受到影响，对于长时间使用的 APP 来说，其稳定性关乎着产品的品牌、口碑以及用户的收入，所以更是不容小觑。")]),t._v(" "),_("p",[t._v("随着业务的快速发展，业务复杂度不断提升，我们开始思考：")]),t._v(" "),_("ol",[_("li",[t._v("如何持续保证 APP 的质量？")]),t._v(" "),_("li",[t._v("当 APP 崩溃后，如何快速定位问题所属的业务线？")]),t._v(" "),_("li",[t._v("能不能在上线之前提前发现潜在的质量问题？")]),t._v(" "),_("li",[t._v("能不能对 APP 进行无侵入的全局质量优化而不需要推动各个业务线？")])]),t._v(" "),_("p",[t._v("基于这些考虑，Booster 应运而生，经过一年多的时间不断打磨，从线上的数据来看，收益显著。由于目前在质量优化方面基于静态分析的开源项目屈指可数，加上质量优化对于 APP 开发者而言门槛偏高，因此，我们选择了将 Booster 开源，希望更多的开发者和用户能从中受益。")]),t._v(" "),_("h2",{attrs:{id:"booster-的解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#booster-的解决方案"}},[t._v("#")]),t._v(" Booster 的解决方案")]),t._v(" "),_("h3",{attrs:{id:"持续保证-app-质量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持续保证-app-质量"}},[t._v("#")]),t._v(" 持续保证 APP 质量")]),t._v(" "),_("p",[t._v("对于 "),_("em",[t._v("APP")]),t._v(" 质量来说，每进行一次性能、稳定性优化都意味着投入大量人力和精力，而且，随着业务的膨胀、可能之前费了九牛二虎之力才取得的一点点成绩就被一个业务需求给付之一炬，而最节省人力的办法就是自动化和标准化，从代码风格到代码审查，从开发测试到集成测试，从灰度发布到全量上线。")]),t._v(" "),_("p",[_("em",[t._v("Booster")]),t._v(" 通过 "),_("em",[t._v("Gradle Plugin")]),t._v(" 的形式为 "),_("em",[t._v("Android")]),t._v(" 工程质量把控提供了一套完整的框架，无论是代码、资源、动态库、依赖关系、包体积、性能等监控，都可以通过 "),_("em",[t._v("Booster")]),t._v(" 来完成。")]),t._v(" "),_("h2",{attrs:{id:"快速定位问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速定位问题"}},[t._v("#")]),t._v(" 快速定位问题")]),t._v(" "),_("p",[t._v("作为开发者，我们经常会遇到发生在一个完全没有上下文的线程中，比如：通过 "),_("em",[t._v("post")]),t._v(" 一个 "),_("code",[t._v("Runnable")]),t._v(" 到主线程消息队列中，或者启一个匿名线程，当发生崩溃后，完全不知道这个 "),_("code",[t._v("Runnable")]),t._v(" 或者线程从何而来，这对于我们排查问题来说，无疑是增加了不少成本，如何才能帮助开发人员快速定位这类问题呢？")]),t._v(" "),_("p",[_("em",[t._v("Booster")]),t._v(" 提供了 "),_("em",[t._v("Transformer SPI")]),t._v(" 让开发者更方便的在构建过程中注入字节码、类继承分析等等，并提供了针对线程的重命名能力，结合 "),_("em",[t._v("APM")]),t._v(" 平台，让排查问题更加方便与高效。")]),t._v(" "),_("h3",{attrs:{id:"提前发现问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提前发现问题"}},[t._v("#")]),t._v(" 提前发现问题")]),t._v(" "),_("p",[t._v("为了能提前发现问题，"),_("em",[t._v("Booster")]),t._v(" 提供了静态分析的能力，通过在构建过程中对代码、资源以及构建中间产物进行分析，便可提前发现有性能问题、安全风险、违反应用商店政策的代码等。")]),t._v(" "),_("h3",{attrs:{id:"无侵入性能优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无侵入性能优化"}},[t._v("#")]),t._v(" 无侵入性能优化")]),t._v(" "),_("p",[t._v("当 "),_("em",[t._v("APP")]),t._v(" 工程或者组织结构到达一定规模，如果需要对整体性能、稳定性进行优化，是一件非常耗费精力的事情，这并不是说开发成本有多高，主要的成本其实是在跨团队、跨部门的沟通上，对于一些实验性的优化来说，没有明确的收益，业务方并不乐意「陪着你瞎折腾」，所以，为了避免这种情况的发生，"),_("em",[t._v("Booster")]),t._v(" 通过 "),_("em",[t._v("AOP（Aspect-Oriented Programming）")]),t._v(" 的方式，对 "),_("em",[t._v("APP")]),t._v(" 进行无侵入的全局性能优化，而且对于业务方来说，几乎是完全透明的。")])])}),[],!1,null,null,null);v.default=r.exports}}]);